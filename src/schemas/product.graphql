type ProductListingSchedule {
  startDate: Date
  endDate: Date
}

extend type Product {
  productListingSchedule: ProductListingSchedule
  availableFulfillmentDates: [Date]
}

input ProductListingScheduleInput {
  startDate: Date
  endDate: Date
}

extend input ProductInput {
  productListingSchedule: ProductListingScheduleInput
  availableFulfillmentDates: [Date]
}

extend type CatalogProduct {
  productListingSchedule: ProductListingSchedule
  availableFulfillmentDates: [Date]
  isFavorite: Boolean
}

type ProductCategory implements Node {
  _id: ID!
  name: String!
  image: String
  updatedAt: DateTime
  createdAt: DateTime
}

type ProductCategoryConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [ProductCategoryEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [ProductCategory]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

"A connection edge in which each node is an `Account` object"
type ProductCategoryEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The account"
  node: ProductCategory
}

input ProductCategoryInput {
  name: String!
  image: String
}

type ProductReview implements Node {
  _id: ID!

  "user who created the review"
  reviewBy: ID!

  "product against which review is made"
  productId: ID!

  "value rated"
  rating: Int!

  "review comment"
  comment: String

  "createdAt"
  createdAt: DateTime

  "updatedAt"
  updatedAt: DateTime
}

input ProductReviewInput {
  reviewBy: ID!
  productId: ID!
  rating: Int!
  comment: String
}

extend type Mutation {
  markProductAsFavorite(productId: ID!): Boolean
  addProductCategory(input: ProductCategoryInput!): ProductCategory
  updateProductCategory(input: ProductCategoryInput!): ProductCategory

  "create a review for a product (ybc-api-plugin-custom)"
  createReviewForProduct(input: ProductReviewInput!): ProductReview
}

extend type Query {
  productCategories: ProductCategoryConnection!
}
