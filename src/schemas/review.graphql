enum ReviewTypeEnum {
  shop
  product
  order
}

enum ReviewSortByField {
  createdAt
  updatedAt
}

type Review implements Node {
  _id: ID!
  shopId: ID!
  productId: ID
  reviewType: ReviewTypeEnum!
  reviewBy: ID!
  reviewByInfo: Account
  rating: Int!
  isDeleted: Boolean
  title: String
  description: String
  helpfulCount: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReviewConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [ReviewEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [Review]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

"A connection edge in which each node is an `Review` object"
type ReviewEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The review"
  node: Review
}

input CreateReviewInput {
  shopId: ID!
  productId: ID
  reviewType: ReviewTypeEnum!
  rating: Int
  title: String
  description: String
}

extend type Mutation {
  createReview(input: CreateReviewInput!): Review
}

extend type Query {
  reviews(
    "productId"
    productId: ID

    "shopId"
    shopId: ID!

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = desc

    "By default, items are sorted by when they were last updated, most recently updated first. Set this to sort by one of the other allowed fields"
    sortBy: CatalogItemSortByField = updatedAt
  ): ReviewConnection
}
