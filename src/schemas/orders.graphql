type CustomOrder implements Node {
  _id: ID!
  referenceId: String!
  shopId: ID!
  itemName: String!
  email: String!
  phoneNumber: String!
  quantity: Int!
  details: String!
  orderBy: ID!
  orderByInfo: Account
  fulfillmentDate: Date!
  workflow: WorkflowStatus
  rejectionReason: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum CustomOrderSortByField {
  "Date and time at which this custom order was created"
  createdAt

  "Date and time at which this custom order was last updated"
  updatedAt
}

type CustomOrderEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The Custom Order"
  node: CustomOrder
}

type CustomOrderConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [CustomOrderEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [CustomOrder]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

input CustomOrderInput {
  itemName: String!
  email: String!
  phoneNumber: String!
  quantity: Int!
  details: String!
  shopId: String!
  occasion: String
  fulfillmentDate: Date!
}

input UpdateCustomOrderInput {
  orderId: ID!
  shopId: ID!
  itemName: String
  phoneNumber: String
  quantity: Int
  details: String
  occasion: String
  fulfillmentDate: Date
  workflow: WorkflowStatus
  rejectionReason: String
}

enum WorkflowStatus {
  inProgress
  completed
  created
  cancelled
  approved
  rejected
}

extend type Mutation {
  createCustomOrder(input: CustomOrderInput!): CustomOrder
  updateCustomOrder(input: UpdateCustomOrderInput!): CustomOrder
}

extend type Query {
  customOrdersByShop(
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = asc

    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: CustomOrderSortByField = createdAt
  ): CustomOrderConnection
}
